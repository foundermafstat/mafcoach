"use client"

import { useState, useCallback, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Download, Search, Trash } from "lucide-react"
import { useToast } from "@/hooks/use-toast"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import type { SensayChatHistory } from "@/app/lib/api/sensay-chat-history"

// Используем тип из нашего сервиса

export default function ChatHistoryPage() {
  // Добавляем стили для правильной прокрутки страницы
  const pageStyles = {
    display: 'flex',
    flexDirection: 'column' as const,
    minHeight: '100vh',
    padding: '1rem',
    overflow: 'auto',
    maxWidth: '1200px',
    margin: '0 auto',
  };
  const [chatHistory, setChatHistory] = useState<SensayChatHistory[]>([])
  const [loading, setLoading] = useState(true)
  const [replicaUUID, setReplicaUUID] = useState(process.env.NEXT_PUBLIC_SENSAY_REPLICA_UUID || "")
  const [selectedChat, setSelectedChat] = useState<SensayChatHistory | null>(null)
  const { toast } = useToast()

  // Fetch chat history
  const fetchChatHistory = useCallback(async () => {
    if (!replicaUUID.trim()) {
      toast({
        title: "Validation Error",
        description: "Please enter a replica UUID.",
        variant: "destructive",
      })
      return
    }
    
    console.log(`Fetching chat history for replica UUID: ${replicaUUID}`);

    try {
      setLoading(true)

      // Используем отладочный API-маршрут
      console.log(`Using debug route for replica UUID: ${replicaUUID}`);
      const response = await fetch(`/api/sensay/chat-history/debug?replicaUUID=${encodeURIComponent(replicaUUID)}`);

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Failed to fetch chat history");
      }

      const debugData = await response.json();
      console.log('Debug API response:', debugData);
      
      // Проверяем, какой метод аутентификации сработал
      if (debugData.error) {
        throw new Error(`Debug API error: ${debugData.error}. Attempts: ${JSON.stringify(debugData.attempts)}`);
      }
      
      // Получаем данные из ответа отладочного API
      const data = debugData.data;
      
      // Обрабатываем данные в зависимости от формата
      let processedData = [];
      
      if (data?.history && Array.isArray(data.history)) {
        processedData = data.history.map((item: any) => ({
          id: item.id || `history-${Date.now()}`,
          replicaUUID: replicaUUID,
          messages: Array.isArray(item.messages) ? item.messages : [],
          createdAt: item.createdAt || new Date().toISOString()
        }));
      } else if (data?.items && Array.isArray(data.items)) {
        processedData = data.items.map((item: any) => ({
          id: item.id || `history-${Date.now()}`,
          replicaUUID: replicaUUID,
          messages: [{
            role: 'user',
            content: item.content || '',
            timestamp: item.created_at || new Date().toISOString()
          }],
          createdAt: item.created_at || new Date().toISOString()
        }));
      } else {
        // Если данные в другом формате, просто используем как есть
        console.log('Data in unknown format:', data);
        processedData = Array.isArray(data) ? data : [];
      }
      
      setChatHistory(processedData);
    } catch (error) {
      console.error("Error fetching chat history:", error);
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to load chat history. Please try again.",
        variant: "destructive",
      })
      setChatHistory([])
    } finally {
      setLoading(false)
    }
  }, [replicaUUID, toast])
  
  // Инициализация: загружаем историю чатов при загрузке страницы
  useEffect(() => {
    console.log('Environment variables available on client:', {
      NEXT_PUBLIC_SENSAY_REPLICA_UUID: process.env.NEXT_PUBLIC_SENSAY_REPLICA_UUID,
      replicaUUID
    });
    
    if (replicaUUID) {
      fetchChatHistory();
    }
  }, [replicaUUID, fetchChatHistory]);

  // Create chat history entry
  const handleCreateChatEntry = async () => {
    if (!replicaUUID.trim()) {
      toast({
        title: "Validation Error",
        description: "Please enter a replica UUID.",
        variant: "destructive",
      })
      return
    }

    try {
      const response = await fetch(`/api/sensay/chat-history?replicaUUID=${encodeURIComponent(replicaUUID)}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          messages: [
            {
              role: "user",
              content: "Hello, this is a test message.",
              timestamp: new Date().toISOString(),
            },
          ],
        }),
      })

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Failed to create chat history entry");
      }

      // Refresh chat history
      fetchChatHistory()

      toast({
        title: "Success",
        description: "Chat history entry created successfully.",
      })
    } catch (error) {
      console.error("Error creating chat history entry:", error)
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to create chat history entry. Please try again.",
        variant: "destructive",
      })
    }
  }

  // Delete chat history entry
  const handleDeleteChatEntry = async (chatId: string) => {
    if (!replicaUUID.trim()) {
      toast({
        title: "Validation Error",
        description: "Please enter a replica UUID.",
        variant: "destructive",
      })
      return
    }

    try {
      const response = await fetch(`/api/sensay/chat-history?replicaUUID=${encodeURIComponent(replicaUUID)}&chatId=${encodeURIComponent(chatId)}`, {
        method: "DELETE",
      })

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Failed to delete chat history entry");
      }

      // Refresh chat history
      fetchChatHistory()
      
      // Close dialog if the deleted chat was selected
      if (selectedChat && selectedChat.id === chatId) {
        setSelectedChat(null);
      }

      toast({
        title: "Success",
        description: "Chat history entry deleted successfully.",
      })
    } catch (error) {
      console.error("Error deleting chat history entry:", error)
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to delete chat history entry. Please try again.",
        variant: "destructive",
      })
    }
  }

  // Format date
  const formatDate = (dateString: string) => {
    const date = new Date(dateString)
    return date.toLocaleString()
  }

  // Download chat history as JSON
  const downloadChatHistory = (chat: SensayChatHistory) => {
    const dataStr = JSON.stringify(chat, null, 2)
    const dataUri = `data:application/json;charset=utf-8,${encodeURIComponent(dataStr)}`

    // Добавляем проверку, что chat.id это строка, иначе используем полное значение или генерируем новый ID
    const chatIdStr = typeof chat.id === 'string' 
      ? chat.id 
      : (typeof chat.id === 'number' || typeof chat.id === 'object' 
          ? String(chat.id) 
          : `chat-${Date.now()}`);
    const exportFileDefaultName = `chat-history-${chatIdStr.substring(0, 8)}.json`;

    const linkElement = document.createElement("a")
    linkElement.setAttribute("href", dataUri)
  }
}, [replicaUUID, fetchChatHistory]);

// Create chat history entry
const handleCreateChatEntry = async () => {
  if (!replicaUUID.trim()) {
    toast({
      title: "Validation Error",
      description: "Please enter a replica UUID.",
      variant: "destructive",
    })
    return
  }

  try {
    const response = await fetch(`/api/sensay/chat-history?replicaUUID=${encodeURIComponent(replicaUUID)}`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        messages: [
          {
            role: "user",
            content: "Hello, this is a test message.",
            timestamp: new Date().toISOString(),
          },
        ],
      }),
    })
        </CardHeader>
        <CardContent className="space-y-4 pt-4">
          <div className="flex items-end gap-4">
            <div className="flex-1">
              <label htmlFor="replicaUUID" className="block text-sm font-medium mb-1">
                Replica UUID
              </label>
              <Input
                id="replicaUUID"
                value={replicaUUID}
                onChange={(e) => setReplicaUUID(e.target.value)}
                placeholder="Enter replica UUID"
                className="border-mafia-300 focus-visible:ring-mafia-500"
              />
            </div>
            <Button onClick={fetchChatHistory} className="bg-mafia-600 hover:bg-mafia-700">
              <Search className="mr-2 h-4 w-4" />
              Search
            </Button>
            <Button onClick={handleCreateChatEntry} variant="outline" className="border-mafia-300">
              Create Test Entry
            </Button>
          </div>
        </CardContent>
      </Card>

      <Card className="border-mafia-200 dark:border-mafia-800">
        <CardHeader className="bg-mafia-50 dark:bg-mafia-900/20 rounded-t-lg">
          <CardTitle className="text-mafia-900 dark:text-mafia-300">Chat History</CardTitle>
        </CardHeader>
        <CardContent className="p-0">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>ID</TableHead>
                <TableHead>Created</TableHead>
                <TableHead>Messages</TableHead>
                <TableHead className="w-[100px]">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {loading ? (
                <TableRow>
                  <TableCell colSpan={4} className="text-center py-4">
                    Loading chat history...
                  </TableCell>
                </TableRow>
              ) : chatHistory.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={4} className="text-center py-4">
                    No chat history found.
                  </TableCell>
                </TableRow>
              ) : (
                chatHistory.map((chat) => (
                  <TableRow key={chat.id}>
                    <TableCell>{typeof chat.id === 'string' ? `${chat.id.substring(0, 8)}...` : chat.id}</TableCell>
                    <TableCell>{formatDate(chat.createdAt)}</TableCell>
                    <TableCell>{chat.messages.length} messages</TableCell>
                    <TableCell>
                      <div className="flex space-x-1">
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => setSelectedChat(chat)}
                          className="h-8 w-8 text-blue-600"
                        >
                          <Search className="h-4 w-4" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => downloadChatHistory(chat)}
                          className="h-8 w-8 text-green-600"
                        >
                          <Download className="h-4 w-4" />
                        </Button>
                        <Dialog>
                          <DialogTrigger asChild>
                            <Button variant="ghost" size="icon" className="h-8 w-8 text-red-600">
                              <Trash className="h-4 w-4" />
                            </Button>
                          </DialogTrigger>
                          <DialogContent>
                            <DialogHeader>
                              <DialogTitle>Delete Chat History</DialogTitle>
                              <DialogDescription>
                                Are you sure you want to delete this chat history? This action cannot be undone.
                              </DialogDescription>
                            </DialogHeader>
                            <DialogFooter>
                              <Button variant="outline" onClick={() => {}}>
                                Cancel
                              </Button>
                              <Button variant="destructive" onClick={() => handleDeleteChatEntry(chat.id)}>
                                Delete
                              </Button>
                            </DialogFooter>
                          </DialogContent>
                        </Dialog>
                      </div>
                    </TableCell>
                  </TableRow>
                ))
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

      {selectedChat && (
        <Dialog open={!!selectedChat} onOpenChange={(open) => !open && setSelectedChat(null)}>
          <DialogContent className="max-w-3xl max-h-[80vh] overflow-y-auto" style={{ maxHeight: '80vh' }}>
            <DialogHeader>
              <DialogTitle>Chat Conversation</DialogTitle>
              <DialogDescription>
                ID: {selectedChat.id} • Created: {formatDate(selectedChat.createdAt)}
              </DialogDescription>
            </DialogHeader>
            <div className="space-y-4 my-4">
              {selectedChat.messages.map((message: { role: string; content: string; timestamp: string }, index: number) => (
                <div key={`${index}-${message.timestamp}`} className={`flex ${message.role === "user" ? "justify-end" : "justify-start"}`}>
                  <div
                    className={`max-w-[80%] rounded-lg p-3 ${
                      message.role === "user" ? "bg-mafia-600 text-white" : "bg-muted"
                    }`}
                  >
                    <p className="text-sm">{message.content}</p>
                    <p className="text-xs mt-1 opacity-60">{formatDate(message.timestamp)}</p>
                  </div>
                </div>
              ))}
            </div>
            <DialogFooter>
              <Button variant="outline" onClick={() => setSelectedChat(null)}>
                Close
              </Button>
              <Button onClick={() => downloadChatHistory(selectedChat)} className="bg-mafia-600 hover:bg-mafia-700">
                <Download className="mr-2 h-4 w-4" />
                Download
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      )}
    </div>
  )
}
